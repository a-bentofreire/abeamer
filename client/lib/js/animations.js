"use strict";
// ------------------------------------------------------------------------
// Copyright (c) 2018-2024 Alexandre Bento Freire. All rights reserved.
// Licensed under the MIT License.
// ------------------------------------------------------------------------
/** @module end-user | The lines bellow convey information for the end-user */
/**
 * ## Description
 *
 * Defines how a list of [elements](#Element) (HTML Element, SVG element and Virtual Element),
 * inside a [](#Scene) defined by [](#Selector) will have a list of
 * [properties](#Animation Properties) (left, src, color, font-size, ...) modified over time.
 *
 * Animations are added in parallel, via `addAnimation`, and in series via `addSerialAnimations`.
 * Although, the animations that are added in parallel, they can be [](#Off-Sync)
 * via `position` parameter.
 *
 * An animation has an [](#Animation Interpolator) that passes a `t` parameter from
 * [Start Value](animations#animationpropvaluestart) to [Value](animations#animationpropvalue) through the
 * [](#Animation Pipeline).
 *
 * An animation doesn't communicates direct with an HTMLElement attributes, instead
 * uses an [](#Adapter) to serve as an interface, allowing for an
 * [animation property](#Animation Properties) to map into different type of Elements
 * and to map an animation property into multiple element properties such [](#Dual Properties).
 *
 * [](#Tasks) which are also added via `addAnimation` and
 * allow to create complex animations and special effects.
 */
var ABeamer;
(function (ABeamer) {
    // ------------------------------------------------------------------------
    //                               AnimationCommonParams
    // ------------------------------------------------------------------------
    // The following section contains data for the end-user
    // generated by `gulp build-definition-files`
    // -------------------------------
    // #export-section-start: release
    /* ---- Bypass Mode ---- */
    ABeamer.BP_FIRST_INSIDE = 0; // this is the default bypass mode
    ABeamer.BP_INSIDE = 1;
    ABeamer.BP_ALL = 2;
    /* ---- Function Stage ---- */
    ABeamer.FS_PREPARE = 0;
    ABeamer.FS_TELEPORT = 1;
    ABeamer.FS_RUN = 2;
    /** Value used, if no duration is defined for an animation. */
    ABeamer.DEFAULT_DURATION = '1f';
    /** Value used, if no duration is defined for a fade in/out. */
    ABeamer.DEFAULT_FADE_DURATION = '400ms';
    function _parseInterpolator(handler, params, exprMotionHandler, numToName, mapper, args) {
        let func;
        params = params || {};
        switch (typeof handler) {
            case 'undefined':
                return undefined;
            case 'number':
                handler = numToName(handler);
            // it flows to string case
            case 'string':
                if (handler.startsWith('==')) {
                    handler = ABeamer.calcStr(handler.substr(1), args);
                }
                if (ABeamer.isExpr(handler)) {
                    func = exprMotionHandler;
                    params._expression = handler;
                }
                else {
                    func = mapper[handler];
                }
                break;
            case 'function':
                func = handler;
                break;
        }
        if (!func) {
            ABeamer.throwI8n(`Unknown: ${handler}`);
        }
        return {
            handler,
            func,
            params,
        };
    }
    // ------------------------------------------------------------------------
    //                               _AbstractWorkAnimation
    // ------------------------------------------------------------------------
    /**
     * Base for the internal representation of an animation.
     * It can be used for `_ElAnimation` and `_PropAnimation`,
     * where `_PropAnimation` belongs to a `_ElAnimation`.
     *
     * This class stores the user parameters after being converted into an
     * internal format.
     */
    class _AbstractWorkAnimation {
        assignValues(acp, story, parent, nameTag, refOrDef) {
            const args = story._args;
            this.framesPerCycle = ABeamer.parseTimeHandler(acp.duration, args, parent ? parent.framesPerCycle : ABeamer.DEFAULT_DURATION, 0);
            this.itemDelay = ABeamer._parseItemDelay(acp, args);
            if (!story._strictMode) {
                if (this.framesPerCycle < 0 && (parent && !this.framesPerCycle)) {
                    if (story._logLevel >= ABeamer.LL_ERROR) {
                        story.logMsg(`${nameTag} has invalid duration frames: ${this.framesPerCycle}`);
                    }
                    return false;
                }
            }
            else {
                if ((parent && !ABeamer.isPositiveNatural(this.framesPerCycle)) ||
                    (!parent && !ABeamer.isNotNegativeNatural(this.framesPerCycle))) {
                    ABeamer.throwErr(`${nameTag} has invalid duration frames: ${this.framesPerCycle}`);
                }
            }
            this.positionFrame = ABeamer.parseTimeHandler(acp.position, args, refOrDef, refOrDef);
            this.advance = acp.advance;
            if (!story._strictMode) {
                if (this.positionFrame < 0) {
                    story.logMsg(`${nameTag} has invalid position: ${this.positionFrame}`);
                    return false;
                }
            }
            else {
                if (!ABeamer.isNotNegativeNatural(this.positionFrame)) {
                    ABeamer.throwErr(`${nameTag} has invalid position: ${this.positionFrame}`);
                }
            }
            if (acp.easing) {
                this.easing = _parseInterpolator(acp.easing, {}, ABeamer._expressionEasing, ABeamer._easingNumToStr, ABeamer._easingFunctions, args);
            }
            else if (parent) {
                this.easing = parent.easing;
            }
            if (acp.oscillator) {
                this.oscillator = _parseInterpolator(acp.oscillator.handler, acp.oscillator.params, ABeamer._expressionEasing, ABeamer._oscillatorNumToStr, ABeamer._easingFunctions, args);
            }
            else if (parent) {
                this.oscillator = parent.oscillator;
            }
            if (acp.path) {
                this.path = _parseInterpolator(acp.path.handler, acp.path.params, ABeamer._expressionPath, ABeamer._pathNumToStr, ABeamer._pathFunctions, args);
            }
            else if (parent) {
                this.path = parent.path;
            }
            return true;
        }
    }
    ABeamer._AbstractWorkAnimation = _AbstractWorkAnimation;
    // ------------------------------------------------------------------------
    //                               _ElWorkAnimation
    // ------------------------------------------------------------------------
    /**
     * Internal representation of an element animation.
     *
     * An element can represent multiple DOM Elements and is defined by its selector.
     *
     * It stores the the user parameters after being converted into an
     * internal format.
     */
    class _ElWorkAnimation extends _AbstractWorkAnimation {
        constructor() {
            super(...arguments);
            this.elAdapters = [];
            this.propInterpolators = [];
        }
        buildElements(story, sceneAdpt, anime) {
            this.elAdapters = ABeamer._parseInElSelector(story, this.elAdapters, sceneAdpt, anime.selector);
        }
    }
    ABeamer._ElWorkAnimation = _ElWorkAnimation;
    // ------------------------------------------------------------------------
    //                               _WorkAnimationProp
    // ------------------------------------------------------------------------
    /**
     * Internal representation of an property animation.
     *
     * Each property belongs to an element defined by its selector,
     * which can represent multiple DOM Elements.
     *
     * It stores the the user parameters after being converted into an
     * internal format.
     *
     * This class is abstract because it's always derived by an Interpolator class
     */
    class _WorkAnimationProp extends _AbstractWorkAnimation {
        constructor(animProp) {
            super();
            this.realPropName = animProp.prop;
            this.propName = animProp.prop;
            this.animProp = animProp;
            this.iterationCount = Math.max(animProp.iterationCount || 1, 1);
            this.scaleDuration = this.iterationCount;
            this.dirPair = ABeamer._propDirToDirPair(animProp.direction);
            this.bypassForwardMode = animProp.bypassForwardMode;
            this.bypassBackwardMode = animProp.bypassBackwardMode;
            this.roundFunc = ABeamer.parseRoundFunc(animProp.roundFunc);
            this.waitFor = !animProp.waitFor ? undefined :
                animProp.waitFor.map((waitItem) => {
                    waitItem.prop = waitItem.prop || this.propName;
                    return waitItem;
                });
        }
        propAssignValues(acp, story, ai, elIndex) {
            if (!this.assignValues(acp, story, ai, this.realPropName, ai.nextPropStartFrame !== undefined ? ai.nextPropStartFrame : ai.positionFrame)) {
                return false;
            }
            const startFrame = this.positionFrame +
                (this.itemDelay.duration ? ABeamer._computeItemDelay(this.itemDelay, elIndex) : 0);
            this.startFrame = startFrame;
            this.totalDuration = this.framesPerCycle * this.scaleDuration;
            this.endFrame = this.totalDuration + startFrame;
            ai.nextPropStartFrame = this.advance === true ? this.endFrame : undefined;
            return true;
        }
    }
    ABeamer._WorkAnimationProp = _WorkAnimationProp;
    // ------------------------------------------------------------------------
    //                               Teleportation
    // ------------------------------------------------------------------------
    function _prepareAnimationsForTeleporting(animes, args) {
        animes.forEach(anime => {
            if (anime.tasks) {
                ABeamer._prepareTasksForTeleporting(anime, anime.tasks, args);
            }
        });
    }
    ABeamer._prepareAnimationsForTeleporting = _prepareAnimationsForTeleporting;
})(ABeamer || (ABeamer = {}));
//# sourceMappingURL=animations.js.map