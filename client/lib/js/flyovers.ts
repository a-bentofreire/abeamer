"use strict";
// ------------------------------------------------------------------------
// Copyright (c) 2018-2024 Alexandre Bento Freire. All rights reserved.
// Licensed under the MIT License.
// ------------------------------------------------------------------------

// Implementation of Flyovers


/** @module end-user | The lines bellow convey information for the end-user */

/**
 * ## Description
 *
 * A **flyover** is a function executed for every frame during render process
 * with the main purpose of providing useful information or sync data.
 *
 * A flyover operates outside a scene animation pipeline, and can it
 * modify the content of one or more elements.
 *
 * ABeamer has following built-in flyovers:
 * - `info`
 * - `video-sync`.
 *
 * More flyovers can be added via `pluginManager.addFlyovers`.
 *
 * ## Info flyover
 *
 * A `info` flyover provides information regarding current time position and frame.
 *
 * @see gallery/animate-flyovers
 *
 * ### Example
 * css
 * ```css
 * #flyover {
 *   left: 10px;
 * }
 * ```
 * html
 * ```html
 * <div id="flyover" class="abeamer-flyover"></div>
 * ```
 * js
 * ```js
 * story.addFlyover('info', {
 *    selector: '#flyover',
 *    format: 'story-frame: ${storyFrameNr}\nstory-time: ${storyElapsedS}',
 * });
 * ```
 *
 * ## Video Sync flyover
 *
 * A `video-sync` flyover synchronizes the current render frame with a background video.
 *
 * **WARNING** Due Chrome 'autoplay-policy', it's not possible to 'safely' use Chrome to sync with videos,
 * In order to overcome this limitation:
 * 1. Use Firefox to test the animation with a background video.
 * 2. Set `serverRender: false` to prevent `abeamer render` from attempting to sync the video while server render.
 * 3. When using `abeamer movie`, set `--bkg-movie` parameter with the video filename to use a background video.
 *
 * @see gallery/animate-video-sync
 *
 * ### Example
 * css
 * ```css
 * #flyover {
 *   left: 10px;
 * }
 * ```
 * html
 * ```html
 * <video id=video width="385" height="288" src="assets/video.mp4" type="video/mp4">
 * ```
 *
 * js
 * ```js
 * story.addFlyover('video-sync', {
 *     selector: '#video',
 *     serverRender: false,
 *   });
 * ```
 */
namespace ABeamer {

  // #generate-group-section
  // ------------------------------------------------------------------------
  //                               Flyovers
  // ------------------------------------------------------------------------

  // The following section contains data for the end-user
  // generated by `gulp build-definition-files`
  // -------------------------------
  // #export-section-start: release

  export interface InfoFlyoverParams {

    /**
     * Element selector from the story, it can be DOM or virtual.
     * @default .info-flyover
     */
    selector?: ElSelector;


    /**
     * Text patterns supporting '${}' macros.
     *
     * Supported macros are:
     *
     * - `storyFrameNr` - current render frame within the story.
     * - `storyElapsedS` - number of seconds elapsed within the story.
     * - `storyElapsedMS` - number of milliseconds elapsed within the story.
     * - `storyElapsedM` - number of minutes elapsed within the story.
     *
     * @example story-frame: ${storyFrameNr} story-time: ${storyTime}
     * @default ${storyFrameNr}
     */
    format?: string;


    /**
     * Maximum number of decimal digits for time macros.
     * @default: 4
     */
    maxPrecision?: int;
  }


  export interface VideoSyncFlyoverParams {

    /**
     * Element selector from the story, it can be DOM or virtual.
     *
     * @default #video
     */
    selector?: ElSelector;

    /**
     * If it's `false`, is disabled if `isServer = true`.
     *
     * @default true
     */
    serverRender: boolean;
  }


  /**
   * Generic parameters passed to a flyover function.
   */
  export type FlyoverParams = AnyParams
    | InfoFlyoverParams
    | VideoSyncFlyoverParams;


  /**
   * Defines a function that is executed on every render step.
   * Use it to render elements that scene independent.
   */
  export type FlyoverFunc = (wkFlyover: WorkFlyover, params: FlyoverParams,
    stage?: uint, args?: ABeamerArgs) => void;


  export interface WorkFlyover {
    name: string;
    params: FlyoverParams;
  }


  /**
   * Flyover Name, Expression or Input Function defined by the user.
   * in `story.addFlyover`.
   */
  export type FlyoverHandler = string | FlyoverFunc
    // Displays info about frames or time
    | 'info'
    // Synchronizes a video current time with the story current render frame
    | 'video-sync';


  // #export-section-end: release
  // -------------------------------

  // ------------------------------------------------------------------------
  //                               Implementation
  // ------------------------------------------------------------------------

  export interface _WorkFlyover extends WorkFlyover {
    func: FlyoverFunc;
  }


  /**
   * Internal map by name pointing to all flyover functions,
   * both built-in and 3rd party.
   */
  export const _flyoverFunctions: { [name: string]: FlyoverFunc } = {};


  export function _buildWorkFlyover(handler: FlyoverHandler, params: FlyoverParams,
    toTeleport: boolean, args: ABeamerArgs): _WorkFlyover {

    let flyoverFunc;

    switch (typeof handler) {
      case 'string':
        flyoverFunc = _flyoverFunctions[handler as string];
        break;

      case 'function':
        flyoverFunc = handler;
        throwIfI8n(toTeleport, Msgs.NoCode);
        break;
    }

    if (!flyoverFunc) {
      throwI8n(Msgs.UnknownOf, { type: Msgs.flyover, p: handler as string });
    }

    const wkFlyover: _WorkFlyover = {
      func: flyoverFunc,
      name: handler as string,
      params: params || {},
    };

    if (toTeleport) {
      wkFlyover.func(wkFlyover, wkFlyover.params, TS_TELEPORT, args);
    }
    return wkFlyover;
  }

  // ------------------------------------------------------------------------
  //                               Flyover Info Class
  // ------------------------------------------------------------------------

  /**
   * Internal properties used in Info Flyover.
   */
  interface _InfoFlyoverParams extends InfoFlyoverParams {
    _elAdapters: ElementAdapter[];
  }


  _flyoverFunctions['info'] = _infoFlyover;

  /**
   * Implementation of Info Flyover.
   */
  function _infoFlyover(_wkFlyover: WorkFlyover,
    params: _InfoFlyoverParams, stage?: uint, args?: ABeamerArgs): void {

    switch (stage) {
      case TS_INIT:
        if (!params._elAdapters) {
          params._elAdapters = args.story.getElementAdapters(params.selector
            || '.info-flyover');
        }
        break;

      case TS_ANIME_LOOP:
        // rendering
        const format = params.format || '${storyFrameNr}';
        const story = args.story;

        params._elAdapters.forEach(elAdapter => {
          const text = format.replace(/\$\{(\w+)\}/g, (_all, macro) => {

            switch (macro) {
              case 'storyFrameNr':
                return story.renderFramePos.toString();
              case 'storyElapsedMS':
                return frame2Time(story.renderFramePos, story.fps,
                  TimeUnit.ms);
              case 'storyElapsedS':
                return frame2Time(story.renderFramePos, story.fps,
                  TimeUnit.s);
              case 'storyElapsedM':
                return frame2Time(story.renderFramePos, story.fps,
                  TimeUnit.m);
            }
            return '';
          });

          // #debug-start
          if (args.isVerbose) {
            args.story.logFrmt('info-flyover', [['text', text]]);
          }
          // #debug-end

          elAdapter.setProp('text', text, args);
        });
        break;
    }
  }

  // ------------------------------------------------------------------------
  //                               Flyover Video Sync Class
  // ------------------------------------------------------------------------

  // @TODO:
  // 1. Support initialFrame, and endFrame
  // 2. Delay playback if video is delayed
  // 3. Render video to file. it's not rendering

  /**
   * Internal properties used Video Sync Flyover.
   */
  interface _VideoSyncFlyoverParams extends VideoSyncFlyoverParams {
    _elAdapters: ElementAdapter[];
  }


  /**
   * Implementation of Video Sync Flyover.
   */
  _flyoverFunctions['video-sync'] = _videoSyncFlyover;

  function _videoSyncFlyover(_wkFlyover: WorkFlyover,
    params: _VideoSyncFlyoverParams, stage?: uint, args?: ABeamerArgs): void {

    // setup
    switch (stage) {
      case TS_INIT:
        if (!params._elAdapters) {
          params._elAdapters = args.story.getElementAdapters(params.selector
            || '#video');
          break;
        }
      case TS_ANIME_LOOP:

        // rendering
        const storyFps = args.story.fps;

        if (!args.hasServer || params.serverRender !== false) {
          params._elAdapters.forEach(elAdapter => {
            const currentTime = args.story.renderFramePos / storyFps;

            // #debug-start
            if (args.isVerbose) {
              args.story.logFrmt('video-sync', [['currentTime', currentTime]]);
            }
            // #debug-end

            elAdapter.setProp('currentTime', currentTime, args);
          });
        }
        break;
    }
  }
}
